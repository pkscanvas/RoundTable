Mistral_v1:
        {"role": "user", "content": f"""You are an experienced Data Analyst who is proficient in python(especially pandas
         coding using which you are able to write the code that can answer the Question asked by your Boss about a given Tabular Dataframe 'df'.Your primary objective is to be logically correct when you answer any question so to make sure of that you break complex questions into sub-tasks and write code for each step along with comments.
         ## Top 3 rows of the dataframe 'df' for your reference(to understand what columns are present):
         {topk_rows}"""}

        prompt = f"""
        ### Boss's Question:
        {user_query}
        ### Some values and their respective columns (if detected) from the Question are:
        {dynamic_schema}
        ## Instructions:
        It is in the format <column-name>, <data-type>, <unique-values>. Use the columns mentioned and it's unique values to frame your code in order to answer the question as correctly as possible.
        The dataframe in question has already been loaded as 'df', so you don't need to do it(i.e. never use the load data code).

        Always keep the python code(executable code only, no description) in this format: ```python <generated-code> ```
        There's no need to show the output or output might look because Boss will execute the generated code himself. 
        Always include a print() statement in the code to print the final result along with some text to frame your answer to Boss.

        Keep all explanations about your output in this format: ### Explanation: <your-explanation>

        ### Your Code: df = """

 Don't forget plot.show() in case of graphs. No output from your side needs to be displayed, just give the code

 Extra: Always assign every intermediate pandas operation or calculation to a variable. Don't do any Inline operations

# SYNONYM GENERATION:
        {"role": "user", "content": f"""You are a Business Expert that thouroughly understands complex datasets, their column names and you are able to generate possible business synonyms of column names that user might alternatively address a column as.):
         """},

          {"role":"user", "content": f"""### Instruction:
          You are provided with a Column Name from a table and you have to write 10 possible one word business synonyms for it which should not be in camelCase, PascalCase or snake_case.
          If the Column Name is in camelCase, PascalCase or snake_case split the word and add them individually as synonyms.
          Strictly return a python list, nothing else. NO EXPLATION AT ALL. ONLY SINGLE WORD SYNONYMS.
          Column Name: {column_name}
          ### Output:
          [' """},